<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace Qaamgo;

use Qaamgo\Models\Job;

class JobsApi
{

    function __construct($apiClient = null)
    {
        if (null === $apiClient) {
            if (Configuration::$apiClient === null) {
                Configuration::$apiClient = new ApiClient(); // create a new API client if not present
                $this->apiClient = Configuration::$apiClient;
            } else
                $this->apiClient = Configuration::$apiClient; // use the default one
        } else {
            $this->apiClient = $apiClient; // use the one provided by the user
        }
    }

    /**
     * @var ApiClient
     */
    private $apiClient; // instance of the ApiClient

    /**
     * get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * jobsGet
     *
     * List of jobs active for the current user identified by the key.
     *
     * @param string $status Filter the status of the job. (required)
     * @param string $x_oc_api_key Api key for the user to filter. (required)
     * @param string $x_oc_token Token for authentication for the current job
     * @param int $page Pagination for list of elements.
     * @return array[Job]
     */
    public function jobsGet($status, $x_oc_api_key, $x_oc_token = null, $page = 1)
    {


        // parse inputs
        $resourcePath = "/jobs";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // query params
        $queryParams['status'] = $this->apiClient->toQueryValue($status);
        $queryParams['page'] = $this->apiClient->toQueryValue($page);

        // header params
        $headerParams['X-Oc-Api-Key'] = $this->apiClient->toHeaderValue($x_oc_api_key);
        if ($x_oc_token !== null) {
            $headerParams['X-Oc-Token'] = $this->apiClient->toHeaderValue($x_oc_token);
        }// header params

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            // for HTTP post (form)
            $httpBody = $formParams;
        }

        // authentication setting, if any
        $authSettings = array();

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings);

        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'array[Job]');
        return $responseObject;
    }


    /**
     * set the API client
     * @param ApiClient $apiClient
     */
    public function setApiClient(ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
    }

    /**
     * jobsPost
     *
     * Creates a new Job with the user key.
     *
     * @param string $x_oc_api_key Api key for the user to filter. (required)
     * @param Job $body Content of the job. (required)
     * @return Job
     */
    public function jobsPost($x_oc_api_key,Job $body)
    {
        // parse inputs
        $resourcePath = "/jobs";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "POST";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());
        $headerParams['X-Oc-Api-Key'] = $this->apiClient->toHeaderValue($x_oc_api_key);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            // for HTTP post (form)
            $httpBody = $formParams;
        }

        // authentication setting, if any
        $authSettings = array();
        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings);

        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'Job');
        return $responseObject;
    }


    /**
     * jobsPostFile
     *
     * Upload a file for a job
     *
     * @param string $x_oc_api_key Api key for the user to filter. (required)
     * @param Job $body Content of the job. (required)
     * @param string $file_path the absolute path of a file (require)
     * @return Job
     * @throws ApiException
     */
    public function jobsPostFile($x_oc_api_key,Job $body, $file_path)
    {

        // parse inputs
        $resourcePath = "/upload-file/{job_id}";
        $resourcePath = str_replace("{job_id}", $body->id, $resourcePath);
        $method = "POST";
        $httpBody = ['isFile' => true, 'file_path' => $file_path];
        $queryParams = array();
        $headerParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }

        // header params
        $headerParams['X-Oc-Api-Key'] = $this->apiClient->toHeaderValue($x_oc_api_key);
        $headerParams['X-Oc-Token'] = $this->apiClient->toHeaderValue($body->token);

        // authentication setting, if any
        $authSettings = array();
        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings, $body->server);

        if (!$response) {
            return null;
        }

        return $response;
    }

    /**
     * jobsJobIdGet
     *
     * Get information about a Job
     *
     * @param string $x_oc_token Token for authentication for the current job (required)
     * @param string $x_oc_api_key Api key for the user to filter. (required)
     * @param string $job_id ID of job that needs to be fetched
     * @return Job
     */
    public function jobsJobIdGet($x_oc_api_key, $job_id, $x_oc_token = null)
    {

        // parse inputs
        $resourcePath = "/jobs/{job_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $resourcePath = str_replace("{" . "job_id" . "}",
            $this->apiClient->toPathValue($job_id), $resourcePath);

        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        $headerParams['X-Oc-Api-Key'] = $this->apiClient->toHeaderValue($x_oc_api_key);
        if ($x_oc_token !== null) {
            $headerParams['X-Oc-Token'] = $this->apiClient->toHeaderValue($x_oc_token);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            // for HTTP post (form)
            $httpBody = $formParams;
        }

        // authentication setting, if any
        $authSettings = array();

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings);

        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'Job');
        return $responseObject;
    }

    /**
     * jobsJobIdDelete
     *
     * Cancels a job created that haven't been started. (Allow to cancel jobs in process.)
     *
     * @param string $x_oc_token Token for authentication for the current job (required)
     * @param string $x_oc_api_key Api key for the user to filter. (required)
     * @param string $job_id ID of job that needs to be fetched (required)
     * @return Job
     */
    public function jobsJobIdDelete($x_oc_token, $x_oc_api_key, $job_id)
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobsJobIdDelete');
        }


        // parse inputs
        $resourcePath = "/jobs/{job_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "DELETE";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());


        // header params
        if ($x_oc_token !== null) {
            $headerParams['X-Oc-Token'] = $this->apiClient->toHeaderValue($x_oc_token);
        }// header params
        if ($x_oc_api_key !== null) {
            $headerParams['X-Oc-Api-Key'] = $this->apiClient->toHeaderValue($x_oc_api_key);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace("{" . "job_id" . "}",
                $this->apiClient->toPathValue($job_id), $resourcePath);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            // for HTTP post (form)
            $httpBody = $formParams;
        }

        // authentication setting, if any
        $authSettings = array();

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings);

        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'Job');
        return $responseObject;
    }

    /**
     * jobsJobIdPatch
     *
     * Modifies the job identified by the id, allows to start a created job.
     *
     * @param Job $body Content of the job. (required)
     * @param string $x_oc_token Token for authentication for the current job (required)
     * @param string $x_oc_api_key Api key for the user to filter. (required)
     * @param string $job_id ID of job that needs to be fetched (required)
     * @return Job
     */
    public function jobsJobIdPatch($body, $x_oc_token, $x_oc_api_key, $job_id)
    {

        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling jobsJobIdPatch');
        }

        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobsJobIdPatch');
        }


        // parse inputs
        $resourcePath = "/jobs/{job_id}";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "PATCH";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());


        // header params
        if ($x_oc_token !== null) {
            $headerParams['X-Oc-Token'] = $this->apiClient->toHeaderValue($x_oc_token);
        }// header params
        if ($x_oc_api_key !== null) {
            $headerParams['X-Oc-Api-Key'] = $this->apiClient->toHeaderValue($x_oc_api_key);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace("{" . "job_id" . "}",
                $this->apiClient->toPathValue($job_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            // for HTTP post (form)
            $httpBody = $formParams;
        }

        // authentication setting, if any
        $authSettings = array();

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings);

        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'Job');
        return $responseObject;
    }

    /**
     * jobsJobIdThreadsGet
     *
     * Get list of threads defined for the current job.
     *
     * @param string $x_oc_token Token for authentication for the current job (required)
     * @param string $x_oc_api_key Api key for the user to filter. (required)
     * @param string $job_id ID of job that needs to be fetched (required)
     * @return array[Thread]
     */
    public function jobsJobIdThreadsGet($x_oc_token, $x_oc_api_key, $job_id)
    {

        // verify the required parameter 'job_id' is set
        if ($job_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $job_id when calling jobsJobIdThreadsGet');
        }


        // parse inputs
        $resourcePath = "/jobs/{job_id}/threads";
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());


        // header params
        if ($x_oc_token !== null) {
            $headerParams['X-Oc-Token'] = $this->apiClient->toHeaderValue($x_oc_token);
        }// header params
        if ($x_oc_api_key !== null) {
            $headerParams['X-Oc-Api-Key'] = $this->apiClient->toHeaderValue($x_oc_api_key);
        }
        // path params
        if ($job_id !== null) {
            $resourcePath = str_replace("{" . "job_id" . "}",
                $this->apiClient->toPathValue($job_id), $resourcePath);
        }


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            // for HTTP post (form)
            $httpBody = $formParams;
        }

        // authentication setting, if any
        $authSettings = array();

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings);

        if (!$response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response, 'array[Thread]');
        return $responseObject;
    }


}
