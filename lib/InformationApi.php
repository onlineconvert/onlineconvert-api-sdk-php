<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

namespace SwaggerClient;

class InformationApi {

  function __construct($apiClient = null) {
    if (null === $apiClient) {
      if (Configuration::$apiClient === null) {
        Configuration::$apiClient = new ApiClient(); // create a new API client if not present
        $this->apiClient = Configuration::$apiClient;
      }
      else
        $this->apiClient = Configuration::$apiClient; // use the default one
    } else {
      $this->apiClient = $apiClient; // use the one provided by the user
    }
  }

    /**
     * @var ApiClient
     */
  private $apiClient; // instance of the ApiClient

  /**
   * get the API client
   */
  public function getApiClient() {
    return $this->apiClient;
  }

  /**
   * set the API client
   */
  public function setApiClient($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * conversionsGet
   *
   * Get a list of the valid conversions.
   *
   * @param string $category Category for the conversion. (required)
   * @param string $target Target for for the conversion.
   * @param Number $page Pagination for list of elements.
   * @return array[Conversion]
   */
   public function conversionsGet($category, $target = null, $page = null) {
      
      // parse inputs
      $resourcePath = "/conversions";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array());
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // query params
      if($category !== null) {
        $queryParams['category'] = $this->apiClient->toQueryValue($category);
      }// query params
      if($target !== null) {
        $queryParams['target'] = $this->apiClient->toQueryValue($target);
      }// query params
      if($page !== null) {
        $queryParams['page'] = $this->apiClient->toQueryValue($page);
      }
      
      
      
      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Conversion]');
      return $responseObject;
  }


    /**
     * getSchema
     *
     * Get API Schema

     * @return $response
     */
    public function getSchema() {


        // parse inputs
        $resourcePath = "/schema";
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            // for HTTP post (form)
            $httpBody = $formParams;
        }

        // authentication setting, if any
        $authSettings = array();

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings);

        if(! $response) {
            return null;
        }

        return $response;
    }

  /**
   * statusesGet
   *
   * Get a list of the valid statuses.
   *
   * @return array[Status]
   */
   public function statusesGet() {
      

      // parse inputs
      $resourcePath = "/statuses";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();
      $_header_accept = $this->apiClient->selectHeaderAccept(array());
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'array[Status]');
      return $responseObject;
  }


    /**
     * statusesGet
     *
     * Get a list of the valid statuses.
     *
     * @param $job_id
     * @param string $x_oc_api_key
     * @return array [Job]
     * @throws ApiException
     */
    public function jobGet($job_id, $x_oc_api_key) {


        // parse inputs
        $resourcePath = "/jobs/{job_id}";
        $resourcePath = str_replace("{job_id}", $job_id, $resourcePath);
        $method = "GET";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array());
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array());

        // header params
        $headerParams['X-Oc-Api-Key'] = $this->apiClient->toHeaderValue($x_oc_api_key);

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } else if (count($formParams) > 0) {
            // for HTTP post (form)
            $httpBody = $formParams;
        }

        // authentication setting, if any
        $authSettings = array();

        // make the API Call
        $response = $this->apiClient->callAPI($resourcePath, $method,
            $queryParams, $httpBody,
            $headerParams, $authSettings);

        if(! $response) {
            return null;
        }

        $responseObject = $this->apiClient->deserialize($response,'array[Job]');
        return $response;
    }

}
